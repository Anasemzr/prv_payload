package main

import (
    "bufio"
    "encoding/base64"
    "fmt"
    "net"
    "os"
)

func main() {
    // Proxy server address and port
    proxyAddr := "proxy.example.com:8080" // Replace with your proxy server address and port

    // Proxy server credentials
    username := "your_username"           // Replace with your proxy username
    password := "your_password"           // Replace with your proxy password

    // Create a connection to the proxy server
    proxyConn, err := net.Dial("tcp", proxyAddr)
    if err != nil {
        fmt.Println("Error connecting to proxy server:", err)
        return
    }
    defer proxyConn.Close()

    // Encode the username and password for Basic Authentication
    credentials := username + ":" + password
    encodedCredentials := base64.StdEncoding.EncodeToString([]byte(credentials))

    // Send the domain to the proxy server with Basic Authentication
    domain := "example.com" // Replace with the domain you want to send
    _, err = fmt.Fprintf(proxyConn, "GET / HTTP/1.1\r\nHost: %s\r\nProxy-Authorization: Basic %s\r\n\r\n", domain, encodedCredentials)
    if err != nil {
        fmt.Println("Error sending domain to proxy server:", err)
        return
    }

    // Read and print the response from the proxy server
    reader := bufio.NewReader(proxyConn)
    for {
        line, err := reader.ReadString('\n')
        if err != nil {
            fmt.Println("Error reading response from proxy server:", err)
            return
        }
        fmt.Print(line)
    }
}



package main

import (
    "fmt"
    "net/http"
    "net/url"
)

func main() {
    // Proxy server address and port
    proxyURL := "http://proxy.example.com:8080" // Replace with your proxy server address and port

    // Proxy server credentials
    username := "your_username"                // Replace with your proxy username
    password := "your_password"                // Replace with your proxy password

    // Create a new HTTP client
    client := &http.Client{
        Transport: &http.Transport{
            Proxy: http.ProxyURL(&url.URL{
                Scheme: "http",
                Host:   proxyURL,
            }),
        },
    }

    // Create a new HTTP request
    req, err := http.NewRequest("GET", "https://example.com", nil)
    if err != nil {
        fmt.Println("Error creating request:", err)
        return
    }

    // Set proxy credentials
    req.SetBasicAuth(username, password)

    // Send the HTTP request using the client
    resp, err := client.Do(req)
    if err != nil {
        fmt.Println("Error sending request:", err)
        return
    }
    defer resp.Body.Close()

    // Print the response status code and body
    fmt.Println("Response status code:", resp.Status)
    // Read and print the response body
    // ...
}

